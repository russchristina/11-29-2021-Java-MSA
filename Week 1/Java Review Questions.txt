What is Java? 
- Java is a high-level programming language that utilizes classes and object-oriented programming built specificially to run on multiple machines effectively
. High-Level is just a classification, meaning that the language is easy to read, has powerful statements, and will generally run on more than one OS

hat does it mean to be a “pass-by-value” language? How is this different from passing by reference? - Pass by value refers to the relationship between a value and parameter, in the way that they are 
both independent of each other when the value is passed. Meaning that although the value of the variable is copied to the parameter, they are independent of each other, and one can be changed without affecting the other
The opposite is true for pass by reference, where the memory address is the same for both the value and the passed in parameter, so if one is changed then the other is changed as well 
What is the difference between the JRE, JDK, and JVM? 

-The JDK--Java Development Kit--is what is used to develop and execute java programs or applications. It includes the JRE and other Development tools such as the 
compiler that is used to turn source code into java machine language. The JRE--Java Runtime Environment--is used to run the java programs and applications. It includes the java library that holds packages needed to run
our code. The JVM--Java Virtual Machine is where our code is actually ran. Which means that when we run our code, we are actually launching a JVM specific to our operating system. This is actually what makes Java 
able to run in different environments, since there are different JVMs tailored to different environement.

What happens during the compilation process?
What are the benefits of using Java?

-Java is easier to read than a lot of other languages, it's a high-level language which means you can execute powerful commands, and you can use different JRE's to run your code in different environements
What is a constructor?

-Constructors are methods defomed at the class level that have the same name as the class. Defining these methods at the class level allows us to force our class to do certain 
actions whenever it is called, such as a computation

What is the first line of a constructor?

-The first line of a constructor is a reference to the superclass constructor, declared by using the keyword super. You shouldn't have to actually type in the word super in this case, since it is auto-generated
on the backend if it is left empty. A superclass is basically just the main class who's methods are being inherited

What are the primitive data types? 

-byte, short, int, long, double, float, boolean, char
What is a no args constructor?
-A constructor that is created without any parameters.
What is the default constructor?

-When you don't explicity create and call a constructor, Java creates a no args constructor that is automatically called; this is your default constructor.

Under what circumstances does a class have a default constructor?

-When a constructor is not explicity created and called 
What are the scopes of a variable in java? 

-class scopes: outside of the main method but inside the class. These can be accessed from any method method scope, which means they can only be accessed within that method
Also block scope, which refers to code within curly braces that are within a method--such as if/else statements or for loops

What are the different access modifiers? What does each one do?

-public, which means it can changed from any class; private, meaning it is only accessible to methods within the same class, and protected, which means that it can only be 
accessed within that same class, or by classes derived from this base class or in the same package

What are the different control statements, and how are they different?
How do you create an Array in java?
What is varargs?
What is the first line of a java application?
What are packages and imports?
What is a static import?
What does the static modifier do?
What are Strings?
What are some string methods?
What is the difference between String, StringBuilder, and StringBuffer?
What is the string pool?
What is the difference between the stack and the heap?
What goes on the stack?
What goes on the heap?
What is an exception?
What is the difference between an exception and an error?
What are the different ways in which we can handle an exception?
What are the differences between a checked exception and an unchecked exception?
How many catch blocks can be used in a try catch? (min and max)?
What does finally do?
Can finally be skipped? How?
How do I create a custom exception?
What is autoboxing? 
What is auto-unboxing?
What is a wrapper class?
What are the different wrapper classes?
What is garbage collection?
How do I perform garbage collection?
What is the difference between final, finally, and finalize?
What is the Reflection API?
What is a Lambda expression?
What is a functional interface?
What are the pillars of object oriented programming? Explain them.
What is the difference between an abstract class and an interface?
How many interfaces can a class implement in Java?
How many interfaces can an interface implement in Java?
How many interfaces can interface extend in Java?
Can an abstract class implement an interface in Java?
How many classes can a class extend in Java?
How many abstract classes can a class extend in Java?
What are the different non-access modifiers? What do they do?
What are the differences between FileinputStream, FileReader, and BufferedReader (as well as their counterparts)?
What is the Scanner class?
What are some Scanner methods?
What is serialization and deserialization?
How do I serialize an object?
What is a marker interface? What is an example of a marker interface?
How do I prevent some data from getting serialized? 
What is the difference between Collection and Collections?
What are some of the subinterfaces of the Collection interface?
What are the various input/delete/get methods for List, Set, and Queue?
How are the List, Set, and Queue interfaces different from each other?
What is an iterator? 
How is an iterator different from a ListIterator?
What are generics? Why use them?
Do generics support primitive data types?
What is the difference between comparator and comparable?
What is the purpose of the Object class?
What are some methods that are inherited from the Object class?
What is the difference between  == and .equals?
What is the purpose of hashcode?
What is the Map interface’s relationship to the Collection interface?
Explain the difference between Hashmap and Hashtable.
How do I iterate through a HashMap?
What is multithreading? Why do we use it?
What are the different ways to create a thread? What is different about them?
Why would I choose one method of creating a thread over another?
What are the JVM recognized states of a thread?
What are various methods that threads have?
What is synchronization?
What are the risks of synchronization?
What is deadlock, livelock, and thread starvation?
What is the producer and consumer problem?
What is JUnit?
What are the annotations of JUnit?
What are the different assert methods of JUnit?
How do I create a test case and test suite in JUnit?
What is Maven?
What is the Maven lifecycle?
What is the purpose of the pom.xml?
What is the purpose of using Maven?
What is the difference between a Singleton and Factory?
What is the difference between a Java Bean and a POJO?
What is the difference between implicit and explicit casting?
When can you upcast a variable? Downcast a variable?
What is Git?
What are some of the benefits of using Git?
What is version control?
What are some basic Git commands?
What is the difference between git init and git clone?

